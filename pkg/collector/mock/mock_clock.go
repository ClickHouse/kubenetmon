// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/collector/clock.go
//
// Generated by this command:
//
//	mockgen -source=pkg/collector/clock.go -destination pkg/collector/mock/mock_clock.go -mock_names ClockInterface=Clock
//

// Package mock_collector is a generated GoMock package.
package mock_collector

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// Clock is a mock of ClockInterface interface.
type Clock struct {
	ctrl     *gomock.Controller
	recorder *ClockMockRecorder
}

// ClockMockRecorder is the mock recorder for Clock.
type ClockMockRecorder struct {
	mock *Clock
}

// NewClock creates a new mock instance.
func NewClock(ctrl *gomock.Controller) *Clock {
	mock := &Clock{ctrl: ctrl}
	mock.recorder = &ClockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Clock) EXPECT() *ClockMockRecorder {
	return m.recorder
}

// Now mocks base method.
func (m *Clock) Now() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Now indicates an expected call of Now.
func (mr *ClockMockRecorder) Now() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*Clock)(nil).Now))
}
