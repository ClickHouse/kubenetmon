// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/collector/conntrack.go
//
// Generated by this command:
//
//	mockgen -source=pkg/collector/conntrack.go -destination pkg/collector/mock/mock_conntrack.go -mock_names ConntrackInterface=Conntrack
//

// Package mock_collector is a generated GoMock package.
package mock_collector

import (
	reflect "reflect"

	conntrack "github.com/ti-mo/conntrack"
	gomock "go.uber.org/mock/gomock"
)

// Conntrack is a mock of ConntrackInterface interface.
type Conntrack struct {
	ctrl     *gomock.Controller
	recorder *ConntrackMockRecorder
}

// ConntrackMockRecorder is the mock recorder for Conntrack.
type ConntrackMockRecorder struct {
	mock *Conntrack
}

// NewConntrack creates a new mock instance.
func NewConntrack(ctrl *gomock.Controller) *Conntrack {
	mock := &Conntrack{ctrl: ctrl}
	mock.recorder = &ConntrackMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Conntrack) EXPECT() *ConntrackMockRecorder {
	return m.recorder
}

// Dump mocks base method.
func (m *Conntrack) Dump(opts *conntrack.DumpOptions) ([]conntrack.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dump", opts)
	ret0, _ := ret[0].([]conntrack.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dump indicates an expected call of Dump.
func (mr *ConntrackMockRecorder) Dump(opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dump", reflect.TypeOf((*Conntrack)(nil).Dump), opts)
}
