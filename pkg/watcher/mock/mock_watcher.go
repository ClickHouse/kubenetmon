// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/watcher/watcher.go
//
// Generated by this command:
//
//	mockgen -source=pkg/watcher/watcher.go -destination pkg/watcher/mock/mock_watcher.go -mock_names WatcherInterface=Watcher
//

// Package mock_watcher is a generated GoMock package.
package mock_watcher

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/core/v1"
)

// Watcher is a mock of WatcherInterface interface.
type Watcher struct {
	ctrl     *gomock.Controller
	recorder *WatcherMockRecorder
}

// WatcherMockRecorder is the mock recorder for Watcher.
type WatcherMockRecorder struct {
	mock *Watcher
}

// NewWatcher creates a new mock instance.
func NewWatcher(ctrl *gomock.Controller) *Watcher {
	mock := &Watcher{ctrl: ctrl}
	mock.recorder = &WatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Watcher) EXPECT() *WatcherMockRecorder {
	return m.recorder
}

// GetNodeByInternalIP mocks base method.
func (m *Watcher) GetNodeByInternalIP(ip string) (*v1.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeByInternalIP", ip)
	ret0, _ := ret[0].(*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeByInternalIP indicates an expected call of GetNodeByInternalIP.
func (mr *WatcherMockRecorder) GetNodeByInternalIP(ip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeByInternalIP", reflect.TypeOf((*Watcher)(nil).GetNodeByInternalIP), ip)
}

// GetNodeByName mocks base method.
func (m *Watcher) GetNodeByName(name string) (*v1.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeByName", name)
	ret0, _ := ret[0].(*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeByName indicates an expected call of GetNodeByName.
func (mr *WatcherMockRecorder) GetNodeByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeByName", reflect.TypeOf((*Watcher)(nil).GetNodeByName), name)
}

// GetPodsByIP mocks base method.
func (m *Watcher) GetPodsByIP(ip string) ([]*v1.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodsByIP", ip)
	ret0, _ := ret[0].([]*v1.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodsByIP indicates an expected call of GetPodsByIP.
func (mr *WatcherMockRecorder) GetPodsByIP(ip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodsByIP", reflect.TypeOf((*Watcher)(nil).GetPodsByIP), ip)
}

// GetServiceByClusterIP mocks base method.
func (m *Watcher) GetServiceByClusterIP(ip string) (*v1.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceByClusterIP", ip)
	ret0, _ := ret[0].(*v1.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceByClusterIP indicates an expected call of GetServiceByClusterIP.
func (mr *WatcherMockRecorder) GetServiceByClusterIP(ip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceByClusterIP", reflect.TypeOf((*Watcher)(nil).GetServiceByClusterIP), ip)
}
